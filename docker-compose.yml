services:
  frontend:
    build:
      context: ./frontend
      dockerfile: DockerfileFrontend
    #ports:
    #  - "3000:3000"
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules # Evita sobreescribir node_modules del contenedor
    environment:
      CHOKIDAR_USEPOLLING: "true" # Activa polling para asegurar detección de cambios en Docker
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: DockerfileBackend
    #ports:
    #  - "8000:8000"
    volumes:
      - ./backend:/app:delegated
    depends_on:
      - database
    command: ["sh", "-c", "composer install && composer show doctrine/dbal && php -S 0.0.0.0:8000 -t public"]
    restart: unless-stopped
    networks:
      - app-network

  database:
    image: mysql:8.0
    #ports:
      #- "3306:3306" #no necesario en producción
    env_file:
      - .env
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - database_data:/var/lib/mysql
    restart: unless-stopped #always en producción
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    #ports:
    #  - "8080:80"
    env_file:
      - .env  # Usa el mismo archivo de entorno
    environment:
      PMA_HOST: database  
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - app-network
  web:
    build:
      context: ./web
      dockerfile: DockerfileWeb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web/certs:/etc/nginx/certs
    depends_on:
      - frontend        
      - backend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  database_data:

